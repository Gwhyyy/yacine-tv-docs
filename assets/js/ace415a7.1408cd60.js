"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[929],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=s(a),u=i,m=d["".concat(p,".").concat(u)]||d[u]||h[u]||o;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,l=new Array(o);l[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[d]="string"==typeof e?e:i,l[1]=r;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3863:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const o={},l="Configuration Variables",r={unversionedId:"configuration/app_config",id:"configuration/app_config",title:"Configuration Variables",description:"Inside the /application folder, navigate to this file path:",source:"@site/docs/3-configuration/app_config.mdx",sourceDirName:"3-configuration",slug:"/configuration/app_config",permalink:"/yacine-tv-docs/configuration/app_config",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3-configuration/app_config.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Optional App Configurations",permalink:"/yacine-tv-docs/configuration/"},next:{title:"How To ?",permalink:"/yacine-tv-docs/how_to/"}},p={},s=[{value:"<code>environmentFilePath</code>",id:"environmentfilepath",level:2},{value:"<code>lightThemePath</code>",id:"lightthemepath",level:2},{value:"<code>menuImageCoverToShowWhenOriginalOneFails</code>",id:"menuimagecovertoshowwhenoriginalonefails",level:2},{value:"<code>backgroundAsset</code>",id:"backgroundasset",level:2},{value:"<code>loadMenuItemsLazily</code>",id:"loadmenuitemslazily",level:2},{value:"<code>loadAppSettingsLazily</code>",id:"loadappsettingslazily",level:2},{value:"<code>loadEventMatchesLazily</code>",id:"loadeventmatcheslazily",level:2},{value:"<code>filterOnlyTodayEventMatches</code>",id:"filteronlytodayeventmatches",level:2},{value:"<code>autoPlay</code>",id:"autoplay",level:2},{value:"<code>initialSettings</code>",id:"initialsettings",level:2}],c={toc:s};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration-variables"},"Configuration Variables"),(0,i.kt)("p",null,"Inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"/application")," folder, navigate to this file path:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"lib/config/general/config.dart`\n")),(0,i.kt)("p",null,"Below is an explanation of each variable and its purpose."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"environmentfilepath"},(0,i.kt)("inlineCode",{parentName:"h2"},"environmentFilePath")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=application/lib/config/config.dart",title:"application/lib/config/config.dart"},"static String environmentFilePath = '.env';\n")),(0,i.kt)("p",null,"This variable specifies the path of the environment file that contains the environment-specific configurations. This file is typically used to store sensitive information such as API keys and should not be committed to source control."),(0,i.kt)("p",null,"Well you don't need to change this if you did followed this documentation exactly like it says, just in case you wanted to change the ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file emplacement to another folder, you will need to change it's path from this variable as well."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"lightthemepath"},(0,i.kt)("inlineCode",{parentName:"h2"},"lightThemePath")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=application/lib/config/config.dart",title:"application/lib/config/config.dart"},"static String lightThemePath = 'assets/theme.json';\n")),(0,i.kt)("p",null,"This variable specifies the path of the JSON file that contains the light theme configuration generated by ",(0,i.kt)("a",{parentName:"p",href:"https://appainter.dev"},"appainter.dev"),". This file is used to define the color scheme and other visual elements of the app."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"menuimagecovertoshowwhenoriginalonefails"},(0,i.kt)("inlineCode",{parentName:"h2"},"menuImageCoverToShowWhenOriginalOneFails")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=application/lib/config/config.dart",title:"application/lib/config/config.dart"},"static String menuImageCoverToShowWhenOriginalOneFails = 'assets/YOUR_IMAGE.png';\n")),(0,i.kt)("p",null,"This variable specifies the path of the image that will be displayed as replacement of the menu cover when it fails to load ( in case of it have an invalid image link)."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"backgroundasset"},(0,i.kt)("inlineCode",{parentName:"h2"},"backgroundAsset")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'static String backgroundAsset = "assets/background.jpg";\n')),(0,i.kt)("p",null,"This variable specifies the path of the background image that is used in the application."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"loadmenuitemslazily"},(0,i.kt)("inlineCode",{parentName:"h2"},"loadMenuItemsLazily")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=application/lib/config/config.dart",title:"application/lib/config/config.dart"},"static bool loadMenuItemsLazily = false;\n")),(0,i.kt)("p",null,"This variable is a boolean that determine whether the menu items should be loaded lazily or not. If it's ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the menu items will be loaded only when the user open to the menu."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"loadappsettingslazily"},(0,i.kt)("inlineCode",{parentName:"h2"},"loadAppSettingsLazily")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=application/lib/config/config.dart",title:"application/lib/config/config.dart"},"static bool loadAppSettingsLazily = false;\n")),(0,i.kt)("p",null,"This variable is a boolean that determine whether the App settings should be loaded lazily or not. If it's ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the App settings will be loaded only when they are needed."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"loadeventmatcheslazily"},(0,i.kt)("inlineCode",{parentName:"h2"},"loadEventMatchesLazily")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=application/lib/config/config.dart",title:"application/lib/config/config.dart"},"static bool loadEventMatchesLazily = false;\n")),(0,i.kt)("p",null,"This variable is a boolean that determine whether the event matches should be loaded lazily or not. If it's ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the event matches will be loaded only when they are needed."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"filteronlytodayeventmatches"},(0,i.kt)("inlineCode",{parentName:"h2"},"filterOnlyTodayEventMatches")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=application/lib/config/config.dart",title:"application/lib/config/config.dart"},"static bool filterOnlyTodayEventMatches = true;\n")),(0,i.kt)("p",null,"This variable is a boolean that determine whether the event matches should be filtered to show only the ones that will happen today or not."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"autoplay"},(0,i.kt)("inlineCode",{parentName:"h2"},"autoPlay")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"static bool autoPlay = true;\n")),(0,i.kt)("p",null,"This variable is a boolean that determine whether the player should be play the live streams as soon as it's opened, or to let it to be played manually from the user."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"initialsettings"},(0,i.kt)("inlineCode",{parentName:"h2"},"initialSettings")),(0,i.kt)("p",null,"This variable is an instance of the AppSettings class that contains initial settings for the app. It includes information such as the app's email, author, logo cover, privacy policy, version, website, and Admob settings. You can configure these settings to match your app's information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=application/lib/config/config.dart",title:"application/lib/config/config.dart"},"static const AppSettings initialSettings = AppSettings(\n    appEmail: '',\n    appAuthor: '',\n    appLogoCover: '',\n    appPrivacyPolicy: '',\n    appVersion: '',\n    appWebsite: '',\n    admobAppId: '',\n    admobBannerId: '',\n    admobInterstitialId: '',\n    showAds: false,\n    showShare: true,\n  );\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"appEmail: the email that you want to use to contact the user."),(0,i.kt)("li",{parentName:"ul"},"appAuthor: the author name of the owner of the app."),(0,i.kt)("li",{parentName:"ul"},"appLogoCover: the logo cover of the app."),(0,i.kt)("li",{parentName:"ul"},"appPrivacyPolicy: the privacy policy link for your app."),(0,i.kt)("li",{parentName:"ul"},"appVersion: the version of the app."),(0,i.kt)("li",{parentName:"ul"},"appWebsite: the website of the app."),(0,i.kt)("li",{parentName:"ul"},"admobAppId: the Admob App Id."),(0,i.kt)("li",{parentName:"ul"},"admobBannerId: the Admob banner Id."),(0,i.kt)("li",{parentName:"ul"},"admobInterstitialId: the Admob interstitial Id."),(0,i.kt)("li",{parentName:"ul"},"showAds: a boolean that determine whether the ads should be shown or not."),(0,i.kt)("li",{parentName:"ul"},"showShare: a boolean that determine whether the share option should be shown or not.")))}d.isMDXComponent=!0}}]);